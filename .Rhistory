View(Speed)
#summary stats
fps <- function(col){
p0 <- min(col)
p25 <- quantile(col, probs = c(.25, .5, .75))
p100 <- max(col)
c(p0, unname(p25), p100)
}
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"BF0",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21[columns]
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"BF0",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21[columns]
columns
n21[columns[1]]
n21[columns[2]]
n21[,columns]
n21[[,columns]]
n21 %>% select(columns)
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"BFO",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21 %>% select(columns)
View(n21)
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"B5O",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21[columns]
lapply(n21[columns], fps)
#summary stats
fps <- function(col){
p0 <- min(col)
p25 <- quantile(col, probs = c(.25, .5, .75), na.rm = TRUE)
p100 <- max(col)
c(p0, unname(p25), p100)
}
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"B5O",
"MD",
"PD",
"TD",
"P",
"E",
"F")
lapply(n21[columns], fps)
as.data.frame(lapply(n21[columns], fps))
summary_table <- as.data.frame(lapply(n21[columns], fps),
row.names = c("Min", "25%", "50%", "75%", "Max"))
View(summary_table)
n21$ATP
min(n21$ATP)
#summary stats
fps <- function(col){
p0 <- min(col, na.rm = TRUE)
p25 <- quantile(col, probs = c(.25, .5, .75), na.rm = TRUE)
p100 <- max(col, na.rm = TRUE)
c(p0, unname(p25), p100)
}
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"B5O",
"MD",
"PD",
"TD",
"P",
"E",
"F")
summary_table <- as.data.frame(lapply(n21[columns], fps),
row.names = c("Min", "25%", "50%", "75%", "Max"))
View(summary_table)
v1 <- 1:100
v2 <- sort(rnorm(100, 0, 1))
plot(v1, v2)
model <- lm(v2 ~ v1)
model$fitted.values
predict(model, newdata = 10)
predict(model, newdata = list(10))
model(10)
shapiro.test(model$residuals)
plot(v2, model$residuals)
hline(0)
abline(0, 0)
abline(0, 0, color="red")
abline(0, 0, col="red")
plot(ape::rtree(8, TRUE))
plot(ape::rtree(8, TRUE), show.tip.label = FALSE)
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan", edge.width = 2)
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan", edge.width = 2)
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan", edge.width = 2)
tree <- ape::rtree(8, TRUE)
plot(tree, type="fan")
plot(tree, type="fan", edge.width = 2, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.3, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.5, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 3.5, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 3, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 3, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.5, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.8, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.6, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.7, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.75, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 45)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 90)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 135)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 165)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 195)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 205)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 230)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 220)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 215)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 210)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 205)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 207)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 208)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 209)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 210)
plot(tree, type="fan", edge.width = 2.74, show.tip.label = FALSE, rotate.tree = 210)
plot(tree, type="fan", edge.width = 2.75, show.tip.label = FALSE, rotate.tree = 210)
2
2 + 2
2 + 2
plot(1:10)
install.packages(c("daggity", "ggdag"))
library(tidyverse)
library(daggity)
library(dagitty)
library(ggdag)
df %>% summarize(correlation = cor(talent, looks))
talent <- rnorm(1000)
looks <- rnorm(1000)
df <- data.frame(talent, looks)
df %>% summarize(correlation = cor(talent, looks))
x <- talent + looks
job <- 1*(x > quantile(x, .75))
job
df <- cbind(df, job)
df
df <- filter(job == 1) %>% summarize(correlation = cor(talent, looks))
df %>%  filter(job == 1) %>% summarize(correlation = cor(talent, looks))
job <- 1*(x < quantile(x, .3))
df <- cbind(df, job)
df %>% filter(job == 1) %>% summarize(correlation = cor(talent, looks))
%
df %>% summarize(correlation = cor(talent, looks))
df <- data.frame(talent, looks)
df %>% summarize(correlation = cor(talent, looks))
x <- talent + looks
job <- 1*(x < quantile(x, .3))
df <- cbind(df, job)
df %>% filter(job == 1) %>% summarize(correlation = cor(talent, looks))
replicate(3, rnorm(12))
as.data.table(replicate(3, rnorm(12)))
as.data.frame(replicate(3, rnorm(12)))
t(as.data.frame(replicate(3, rnorm(12))))
t(as.data.frame(replicate(3, round(rnorm(12), digits = 2))))
t(as.data.frame(replicate(3, round(rnorm(12), digits = 3))))
t(as.data.frame(replicate(3, round(rnorm(12), digits = 2))))
embeddings <- t(as.data.frame(replicate(3, round(rnorm(12), digits = 2))))
embeddings
library(gridExtra)
tableGrob(embeddings)
plot(tableGrob(embeddings))
embeddings
embeddings[1,]
embeddings[1,]
as.character(embeddings[1,])
paste0(as.character(embeddings[1,]), collapse = "&")
paste0(as.character(embeddings[1,]), collapse = " & ")
remotes::install_github("MintaYLu/DDN-R")
Revticulate::doRev("simTree(4)")
library(Revticulate)
doRev("2")
doRev("simTree(4)")
tree <- doRev("simTree(4)")
plot(tree)
plot(tree, show.tip.label = FALSE)
plot(tree, show.tip.label = FALSE, edge.width = 2)
plot(tree, show.tip.label = FALSE, edge.width = 2.5)
plot(tree, show.tip.label = FALSE, edge.width = 2.5, root.edge = TRUE)
library(phytools)
reroot(tree, 1)
plot(reroot(tree, 1))
plot(reroot(tree, 2))
plot(reroot(tree, 3))
plot(reroot(tree, 4))
plot(reroot(tree))
plot(tree)
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/R')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/R')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/R')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/R')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/R')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/R')
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(),
mainPanel()
)
)
library(tidyverse)
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Code/shinyapp/shiny_play')
?textOutput
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textOutput("sidebar_top")
),
mainPanel()
)
)
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Code/shinyapp/shiny_play')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Code/shinyapp/shiny_play')
?textInput
?fileInput
?need()
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Code/shinyapp/shiny_play')
traceback()
library(shiny)
names(tags)
?tags$video()
?tags
setwd("D://uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/")
shiny::runApp('R')
shiny::runApp('R')
runApp('R')
shiny::runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
read_json("data/settings/settings.json")
read_json("data/settings/settings.json")
settings <- read_json("data/settings/settings.json")
settings$predefined_meshes$suzanne
?write_json()
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
reticulate::repl_python()
exit
runApp('R')
runApp('R')
runApp('R')
?jsonlite::write_json()
library(jsonlite)
json_file <- read_json()
json_file <- read_json("data/settings/settings.json")
json_file
json_file$active_mesh
runApp('R')
sf <- jsonlite::fromJSON("data/settings/settings.json")
sf$predefined_meshes
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
sf <- jsonlite::read_json("../data/settings/settings.json")
sf <- jsonlite::read_json("data/settings/settings.json")
sf
sf$predefined_meshes
of <- list.files(path = "data/defaults", pattern = "\\.obj$", full.names = TRUE)
of
of <- sapply(of, normalizePath)
of
fn <- basename(of)
fn
fn <- sub("\\.obj$", "", fn)
fn
ofd <- data.frame(file = fn, path = of)
ofd
View(ofd)
View(ofd)
ofl <- split(ofd$path, ofd$file)
ofl
View(ofl)
ofd
as.list(ofd)
View(as.list(ofl))
ofl
ofl$suzanne
runApp('R')
sf
runApp('R')
ofl
obj_files_df
ofd
t(ofd)
View(t(ofd))
runApp('R')
runApp('R')
runApp('R')
runApp('R')
settings_file <- jsonlite::read_json("../data/settings/settings.json")
settings_file <- jsonlite::read_json("data/settings/settings.json")
settings_file
settings_file$active_mesh
settings_file$active_mesh <- unlist(settings_file$active_mesh)
settings_file
runApp('R')
runApp('R')
settings_file <- jsonlite::read_json("../data/settings/settings.json")
settings_file <- jsonlite::read_json("data/settings/settings.json")
settings_file
sapply(settings_file, unlist)
View(sapply(settings_file, unlist))
runApp('R')
runApp('R')
runApp('R')
?split
obj_files <- list.files(path = "data/defaults", pattern = "\\.obj$", full.names = TRUE)
obj_files <- sapply(obj_files, normalizePath)
file_names <- basename(obj_files)
file_names <- sub("\\.obj$", "", file_names)
?list()
?list(obj_files)
list(obj_files)
runApp('R')
obj_files <- list.files(path = "data/defaults", pattern = "\\.obj$", full.names = TRUE)
# Convert the relative paths to absolute paths
obj_files <- sapply(obj_files, normalizePath)
# Get the file names without extensions
file_names <- basename(obj_files)
file_names <- sub("\\.obj$", "", file_names)
# make a list of names for the path dropdown menu
obj_files_list <- list(obj_files)
obj_files_list
file_names
names(obj_files_list) <- file_names
obj_files <- list.files(path = "data/defaults", pattern = "\\.obj$", full.names = TRUE)
# Convert the relative paths to absolute paths
obj_files <- sapply(obj_files, normalizePath)
# Get the file names without extensions
file_names <- basename(obj_files)
file_names <- sub("\\.obj$", "", file_names)
# make a list of names for the path dropdown menu
obj_files_list <- as.list(obj_files)
obj_files_list
names(obj_files_list) <- file_names
obj_files_list
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
reticulate::repl_python()
bpy.utils.unregister_class(TraitBlenderPanel)
quit
runApp('R')
shiny::runApp('R')
shiny::runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
runApp('R')
shiny::runApp('R')
runApp('R')
shiny::runApp('R')
