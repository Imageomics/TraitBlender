axis.title.y = element_blank()
) +
scale_x_continuous(breaks=1:7, labels=1:7, limits = c(0.6, 7.4))
TD <- n21 %>%
ggplot(aes(TD)) +
geom_histogram(binwidth = .5) +
labs(x = "Temporal Demand",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=1:7, labels=1:7, limits = c(0.6, 7.4))
P <- n21 %>%
ggplot(aes(P)) +
geom_histogram(binwidth = .5) +
labs(x = "Performance",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=1:7, labels=1:7, limits = c(0.6, 7.4))
E <- n21 %>%
ggplot(aes(E)) +
geom_histogram(binwidth = .5) +
labs(x = "Effort",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=1:7, labels=1:7, limits = c(0.6, 7.4))
Fr <- n21 %>%
ggplot(aes(`F`)) +
geom_histogram(binwidth = .5) +
labs(x = "Frustration",
y = "Count") + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=1:7, labels=1:7, limits = c(0.6, 7.4))
row3 <- plot_grid(sa, MD, PD, TD, P, E, Fr,
nrow = 1,
align = "v")
ta <- n21 %>%
ggplot(aes(Trait_Anxiety)) +
geom_histogram(binwidth = 1) +
labs(x = "Trait Anxiety",
y = "Count") +
ylim(0, 110000) +
scale_x_continuous(breaks=seq(20, 80, by=10), labels=seq(20, 80, by=10), limits = c(20, 80))
extraversion <- n21 %>%
ggplot(aes(B5E)) +
geom_histogram(binwidth = .5) +
labs(x = "Extraversion",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=0:10, labels=0:10, limits = c(2, 10))
agreeableness <- n21 %>%
ggplot(aes(B5A)) +
geom_histogram(binwidth = .5) +
labs(x = "Agreeableness",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=0:10, labels=0:10, limits = c(2, 10))
conscientiousness <- n21 %>%
ggplot(aes(B5C)) +
geom_histogram(binwidth = .5) +
labs(x = "Conscientiousness",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=0:10, labels=0:10, limits = c(2, 10))
neuroticism <- n21 %>%
ggplot(aes(B5N)) +
geom_histogram(binwidth = .5) +
labs(x = "Neuroticism",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=0:10, labels=0:10, limits = c(2, 10))
openness <- n21 %>%
ggplot(aes(B5O)) +
geom_histogram(binwidth = .5) +
labs(x = "Openness",
y = "Count") +
ylim(0, 110000) + theme(axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
axis.title.y = element_blank()
) +
scale_x_continuous(breaks=0:10, labels=0:10, limits = c(2, 10))
row4 <- plot_grid(ta, extraversion, agreeableness, conscientiousness, neuroticism, openness,
nrow = 1,
align = "v")
fullplot <- row1 / row2 / row3 / row4
fullplot <- row1 / row2 / row3 / row4
fullploy
fullplot
quantile(rnorm(100m mean = 0, mean1), probs = c(.25, .5, .75))
quantile(rnorm(100, mean = 0, mean1), probs = c(.25, .5, .75))
quantile(rnorm(100, mean = 0, ds=1), probs = c(.25, .5, .75))
quantile(rnorm(100, mean = 0, sd=1), probs = c(.25, .5, .75))
a <- quantile(rnorm(100, mean = 0, sd=1), probs = c(.25, .5, .75))
x <- 1
c(x, a, x)
fps <- function(col){
p0 <- min(col)
p25 <- quantile(col, probs = c(.25, .5, .75))
p100 <- max(col)
c(p0, unname(p25), p100)
}
fps(n21$JF)
View(Speed)
#summary stats
fps <- function(col){
p0 <- min(col)
p25 <- quantile(col, probs = c(.25, .5, .75))
p100 <- max(col)
c(p0, unname(p25), p100)
}
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"BF0",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21[columns]
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"BF0",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21[columns]
columns
n21[columns[1]]
n21[columns[2]]
n21[,columns]
n21[[,columns]]
n21 %>% select(columns)
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"BFO",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21 %>% select(columns)
View(n21)
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"B5O",
"MD",
"PD",
"TD",
"P",
"E",
"F")
n21[columns]
lapply(n21[columns], fps)
#summary stats
fps <- function(col){
p0 <- min(col)
p25 <- quantile(col, probs = c(.25, .5, .75), na.rm = TRUE)
p100 <- max(col)
c(p0, unname(p25), p100)
}
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"B5O",
"MD",
"PD",
"TD",
"P",
"E",
"F")
lapply(n21[columns], fps)
as.data.frame(lapply(n21[columns], fps))
summary_table <- as.data.frame(lapply(n21[columns], fps),
row.names = c("Min", "25%", "50%", "75%", "Max"))
View(summary_table)
n21$ATP
min(n21$ATP)
#summary stats
fps <- function(col){
p0 <- min(col, na.rm = TRUE)
p25 <- quantile(col, probs = c(.25, .5, .75), na.rm = TRUE)
p100 <- max(col, na.rm = TRUE)
c(p0, unname(p25), p100)
}
columns <- c("HR_Raw",
"Speed",
"ATP",
"Accel_Energy",
"Rot_Energy",
"JF",
"Weather",
"State_Anxiety",
"Trait_Anxiety",
"B5A",
"B5C",
"B5E",
"B5N",
"B5O",
"MD",
"PD",
"TD",
"P",
"E",
"F")
summary_table <- as.data.frame(lapply(n21[columns], fps),
row.names = c("Min", "25%", "50%", "75%", "Max"))
View(summary_table)
v1 <- 1:100
v2 <- sort(rnorm(100, 0, 1))
plot(v1, v2)
model <- lm(v2 ~ v1)
model$fitted.values
predict(model, newdata = 10)
predict(model, newdata = list(10))
model(10)
shapiro.test(model$residuals)
plot(v2, model$residuals)
hline(0)
abline(0, 0)
abline(0, 0, color="red")
abline(0, 0, col="red")
plot(ape::rtree(8, TRUE))
plot(ape::rtree(8, TRUE), show.tip.label = FALSE)
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "radial")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan")
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan", edge.width = 2)
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan", edge.width = 2)
plot(ape::rtree(8, TRUE), show.tip.label = FALSE, type = "fan", edge.width = 2)
tree <- ape::rtree(8, TRUE)
plot(tree, type="fan")
plot(tree, type="fan", edge.width = 2, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.3, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.5, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 3.5, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 3, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 3, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.5, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.8, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.6, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.7, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.75, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 45)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 90)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 135)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 165)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 195)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 205)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 230)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 220)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 215)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 210)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 205)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 207)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 208)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 209)
plot(tree, type="fan", edge.width = 2.73, show.tip.label = FALSE, rotate.tree = 210)
plot(tree, type="fan", edge.width = 2.74, show.tip.label = FALSE, rotate.tree = 210)
plot(tree, type="fan", edge.width = 2.75, show.tip.label = FALSE, rotate.tree = 210)
2
2 + 2
2 + 2
plot(1:10)
install.packages(c("daggity", "ggdag"))
library(tidyverse)
library(daggity)
library(dagitty)
library(ggdag)
df %>% summarize(correlation = cor(talent, looks))
talent <- rnorm(1000)
looks <- rnorm(1000)
df <- data.frame(talent, looks)
df %>% summarize(correlation = cor(talent, looks))
x <- talent + looks
job <- 1*(x > quantile(x, .75))
job
df <- cbind(df, job)
df
df <- filter(job == 1) %>% summarize(correlation = cor(talent, looks))
df %>%  filter(job == 1) %>% summarize(correlation = cor(talent, looks))
job <- 1*(x < quantile(x, .3))
df <- cbind(df, job)
df %>% filter(job == 1) %>% summarize(correlation = cor(talent, looks))
%
df %>% summarize(correlation = cor(talent, looks))
df <- data.frame(talent, looks)
df %>% summarize(correlation = cor(talent, looks))
x <- talent + looks
job <- 1*(x < quantile(x, .3))
df <- cbind(df, job)
df %>% filter(job == 1) %>% summarize(correlation = cor(talent, looks))
replicate(3, rnorm(12))
as.data.table(replicate(3, rnorm(12)))
as.data.frame(replicate(3, rnorm(12)))
t(as.data.frame(replicate(3, rnorm(12))))
t(as.data.frame(replicate(3, round(rnorm(12), digits = 2))))
t(as.data.frame(replicate(3, round(rnorm(12), digits = 3))))
t(as.data.frame(replicate(3, round(rnorm(12), digits = 2))))
embeddings <- t(as.data.frame(replicate(3, round(rnorm(12), digits = 2))))
embeddings
library(gridExtra)
tableGrob(embeddings)
plot(tableGrob(embeddings))
embeddings
embeddings[1,]
embeddings[1,]
as.character(embeddings[1,])
paste0(as.character(embeddings[1,]), collapse = "&")
paste0(as.character(embeddings[1,]), collapse = " & ")
remotes::install_github("MintaYLu/DDN-R")
Revticulate::doRev("simTree(4)")
library(Revticulate)
doRev("2")
doRev("simTree(4)")
tree <- doRev("simTree(4)")
plot(tree)
plot(tree, show.tip.label = FALSE)
plot(tree, show.tip.label = FALSE, edge.width = 2)
plot(tree, show.tip.label = FALSE, edge.width = 2.5)
plot(tree, show.tip.label = FALSE, edge.width = 2.5, root.edge = TRUE)
library(phytools)
reroot(tree, 1)
plot(reroot(tree, 1))
plot(reroot(tree, 2))
plot(reroot(tree, 3))
plot(reroot(tree, 4))
plot(reroot(tree))
plot(tree)
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
shiny::runApp('D:/uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim')
setwd("D://uyeda_lab/Projects/Evolution Simulator/Evolution Simulator/Code/shinyapp/EvoSim/")
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
?bsModal
runApp('R')
runApp('R')
?extendShinyjs
runApp('R')
tags$head(
tags$style(HTML("
.sidebar {
height: 100vh;  /* vh is a CSS unit that stands for viewport height */
overflow: auto;
}
.myActionButton {
background-color: darkgrey;
color: white;
border: none;
text-align: center;
display: inline-block;
font-size: 20px;
padding: 4px 55px;
margin: 5px 0px
}
.modal-backdrop {
z-index: 1050 !important;
}
.modal {
z-index: 1100 !important;
}
.myActionButton:hover {
background-color: grey;
}
#rightSidebar {
width: 0;
height: 100%;
position: fixed;
z-index: 2;
top: 0;
right: 0;
overflow-x: hidden;
transition: 0.5s;
padding-top: 60px;
z-index: 9900;
}
#rightSidebar.open {
width: 22.5%;
transition: 0.5s;
}
.sidebar-div {
position: relative;
z-index: 9999;
}
")),
#this keeps track of the event of the bsModal with the tree plot on it closing, which is necessary
#to make sure the sidebar closes when it closes
#   tags$head(tags$script(HTML("
#   var modalClosedValue = 0;
#   $(document).on('hidden.bs.modal', '.modal', function (event) {
#     if($(event.currentTarget).find('#plot2').length > 0) {
#       modalClosedValue = modalClosedValue == 0 ? 1 : 0;
#       Shiny.setInputValue('modalClosed', modalClosedValue);
#     }
#   });
# ")))S
)
runApp('R')
runApp('R')
?isolate
runApp('R')
